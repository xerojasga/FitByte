/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core.views.ingredients;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import com.mycompany.fitbyte_app.ConnectionProvider;
import core.DAO.IngredientDAO;
import static core.views.ingredients.IngredientCreate.current_user;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import user.models.User;


public class IngredientImageAdd extends javax.swing.JFrame {


    /**
     * Creates new form testing_image
     */
    public static User current_user;
    public IngredientImageAdd(User user) {
        initComponents();    
        current_user = user;
    }
    
    
    private static final Connection connection = ConnectionProvider.connection;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpImagen = new javax.swing.JPanel();
        cargarBTN = new javax.swing.JButton();
        mostrarBTN = new javax.swing.JButton();
        idTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        exitBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpImagen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jpImagen.setLayout(new javax.swing.BoxLayout(jpImagen, javax.swing.BoxLayout.LINE_AXIS));

        cargarBTN.setText("Cargar");
        cargarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarBTNActionPerformed(evt);
            }
        });

        mostrarBTN.setText("Mostrar");
        mostrarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBTNActionPerformed(evt);
            }
        });

        jLabel1.setText("Id del ingrediente:");

        exitBTN.setText("Salir");
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(cargarBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostrarBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(idTF, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jpImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTF)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cargarBTN)
                    .addComponent(mostrarBTN)
                    .addComponent(exitBTN))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarBTNActionPerformed

        //connection to the database
        PreparedStatement ps;
        ResultSet rs;
        ConnectionProvider objCon = new ConnectionProvider();
        
        //File chooser
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.PNG","png"); 
        fc.setFileFilter(filtro);
        //Added image
        int seleccion = fc.showOpenDialog(this);
        //id of the ingredient
        int  id_upload = Integer.parseInt(idTF.getText()); 
        
        if(seleccion == JFileChooser.APPROVE_OPTION){
            File fichero = fc.getSelectedFile();
            String ruta = fichero.getAbsolutePath();
            try {
                FileInputStream fis = new FileInputStream(fichero);
                try {
                    ps = connection.prepareStatement(IngredientDAO.IMAGE_SQL);
                    ps.setBinaryStream(1, fis,(int) fichero.length());
                    ps.setInt(2,id_upload);
                    ps.execute();
                    JOptionPane.showMessageDialog(null, "Imagen Guardada");     
                } catch (SQLException ex) {
                    Logger.getLogger(IngredientImageAdd.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Error");
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(IngredientImageAdd.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        

    }//GEN-LAST:event_cargarBTNActionPerformed

    private void mostrarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBTNActionPerformed
        // TODO add your handling code here:
        PreparedStatement ps;
        ResultSet rs;
        ConnectionProvider objCon = new ConnectionProvider();
        
        int  id_upload = Integer.parseInt(idTF.getText()); 
        
        try {
            ps = connection.prepareStatement(IngredientDAO.DISPLAY_SQL);
            ps.setInt(1, id_upload);
            rs = ps.executeQuery();
            
            BufferedImage buffimg = null;
            byte[] image = null;
            while(rs.next()){
                image = rs.getBytes("IMAGEN");
                InputStream img = rs.getBinaryStream("IMAGEN");
                
                try {
                    buffimg = ImageIO.read(img);
                    ImageMySQL imagen = new ImageMySQL(jpImagen.getHeight(),jpImagen.getWidth(),buffimg);
                    jpImagen.add(imagen);
                    jpImagen.repaint();
                } catch (IOException ex) {
                    Logger.getLogger(IngredientImageAdd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(IngredientImageAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_mostrarBTNActionPerformed

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        this.dispose();
        IngredientCatalogue n = new IngredientCatalogue(current_user);
        n.setVisible(true);
    }//GEN-LAST:event_exitBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngredientImageAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngredientImageAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngredientImageAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngredientImageAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngredientImageAdd(current_user).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarBTN;
    private javax.swing.JButton exitBTN;
    private javax.swing.JTextField idTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jpImagen;
    private javax.swing.JButton mostrarBTN;
    // End of variables declaration//GEN-END:variables
}
